package adt;import java.util.Iterator;public class LinkedQueue<T> implements QueueInterface<T> {  private Node firstNode;  private Node lastNode;   private int size;  public LinkedQueue() {    firstNode = null;    lastNode = null;    size = 0;  }   @Override  public void enqueue(T newEntry) {    Node newNode = new Node(newEntry, null, lastNode);    if (isEmpty()) {      firstNode = newNode;    } else {      lastNode.next = newNode;    }    lastNode = newNode;    size++;  }   @Override  public T getFront() {    T front = null;    if (!isEmpty()) {      front = firstNode.data;    }    return front;  }   @Override  public T dequeue() {    T front = null;    if (!isEmpty()) {      front = firstNode.data;      firstNode = firstNode.next;      if (firstNode != null) {          firstNode.prev = null;      } else {          lastNode = null;      }      size--;    }     return front;  }  @Override  public boolean isEmpty() {    return size == 0;  }  @Override  public void clear() {    firstNode = null;    lastNode = null;    size = 0;  }     @Override  public int size() {      return size;  }    @Override  public Iterator<T> getIterator() {    return new LinkedQueueIterator();  }  private class LinkedQueueIterator implements Iterator<T> {    private Node currentNode;    public LinkedQueueIterator() {      currentNode = firstNode;    }    @Override    public boolean hasNext() {      return currentNode != null;    }    @Override    public T next() {      if (hasNext()) {        T returnData = currentNode.data;        currentNode = currentNode.next;        return returnData;      } else {        return null;      }    }  }  private class Node {    private T data;     private Node next;     private Node prev;    private Node(T data) {      this.data = data;      this.next = null;      this.prev = null;    }     private Node(T data, Node next, Node prev) {      this.data = data;      this.next = next;      this.prev = prev;    }   } } 